/**
 * 
 */
package com.zen.asr.portlet;

import java.io.IOException;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.List;

import javax.portlet.Portlet;
import javax.portlet.PortletException;
import javax.portlet.RenderRequest;
import javax.portlet.RenderResponse;
import javax.portlet.ResourceRequest;
import javax.portlet.ResourceResponse;

import org.osgi.service.component.annotations.Component;

import com.liferay.petra.string.StringPool;
import com.liferay.portal.kernel.dao.orm.Disjunction;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.OrderFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ProjectionFactoryUtil;
import com.liferay.portal.kernel.dao.orm.RestrictionsFactoryUtil;
import com.liferay.portal.kernel.json.JSONArray;
import com.liferay.portal.kernel.json.JSONFactoryUtil;
import com.liferay.portal.kernel.json.JSONObject;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.portlet.bridges.mvc.MVCPortlet;
import com.liferay.portal.kernel.theme.ThemeDisplay;
import com.liferay.portal.kernel.util.ContentTypes;
import com.liferay.portal.kernel.util.ParamUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.util.WebKeys;
import com.zen.asr.constants.MEUtilizationWebKeys;
import com.zen.asr.util.EmployeeOwnershipUtilizationUtil;

import zen.me.service.constant.ManagerUpType;
import zen.me.service.constant.UserDetailsFilterColumn;
import zen.me.service.model.UserDetails;
import zen.me.service.service.ManagerResponseLocalServiceUtil;
import zen.me.service.service.UserDetailsLocalServiceUtil;


/**
 * @Date : 3 May, 2023 12:40:32 PM
 * @User : MG68616
 * TODO : TODO
 */

@Component(immediate = true, property = { "com.liferay.portlet.display-category=ME Portal",
		"com.liferay.portlet.instanceable=true", "javax.portlet.display-name=ZenEmployeeOwnershipUtilization",
		"javax.portlet.init-param.template-path=/", "javax.portlet.init-param.view-template=/employeeOwnershipUtilization/view.jsp",
		"javax.portlet.name=Zen Employee Ownership Utilization",
		"com.liferay.portlet.footer-portlet-javascript=/js/employeeOwnershipUtilization.js",
		"javax.portlet.resource-bundle=content.Language", "javax.portlet.security-role-ref=power-user,user",
		"com.liferay.portlet.requires-namespaced-parameters=false" }, service = Portlet.class)
public class EmployeeOwnershipUtilizationPortlet  extends MVCPortlet{
	
	private static Log logger = LogFactoryUtil.getLog(EmployeeOwnershipUtilizationPortlet.class);

	@Override
	public void doView(RenderRequest renderRequest, RenderResponse renderResponse)
			throws IOException, PortletException {
		super.doView(renderRequest, renderResponse);
	}
	
	@Override
	public void serveResource(ResourceRequest resourceRequest, ResourceResponse resourceResponse)
			throws IOException, PortletException {
				ThemeDisplay themeDisplay = (ThemeDisplay) resourceRequest.getAttribute(WebKeys.THEME_DISPLAY);
				
				if (Validator.isNotNull(themeDisplay) && themeDisplay.isSignedIn()) {
					long employeeId = Long.parseLong(themeDisplay.getUser().getJobTitle());
					
						String action = ParamUtil.getString(resourceRequest, "action", null);
						logger.info("Action  <<  " + action);
						JSONObject jsonObject = JSONFactoryUtil.createJSONObject();

						if (Validator.isNotNull(action)) {
							if (StringUtil.equalsIgnoreCase(action, "laodUPType")) {
								logger.info("Action  Inside<<  " + action);
								String country = ParamUtil.getString(resourceRequest, "country", null);
								JSONArray countries = JSONFactoryUtil.createJSONArray();
							
								
								List<String> countriesList = EmployeeOwnershipUtilizationUtil.getCountryListByManager(
										Long.parseLong(themeDisplay.getUser().getJobTitle()));
								if (Validator.isNotNull(countriesList) && countriesList.size() > 0) {
									countriesList.forEach(c -> {
										countries.put(c);
									});
								}
		
								try {
									if (Validator.isBlank(country) || Validator.isNull(country)) {
										country = countriesList.get(0);
									}
								} catch (Exception e) {
								}
		
								if (country.equalsIgnoreCase("All")) {
									country = null;
								}
								try {
									long firstUpCount = UserDetailsLocalServiceUtil.getManagerUpCount(
											Long.parseLong(themeDisplay.getUser().getJobTitle()), MEUtilizationWebKeys.FIRST_UP_MANSGER,
											country);
									long secounUpCount = UserDetailsLocalServiceUtil.getManagerUpCount(
											Long.parseLong(themeDisplay.getUser().getJobTitle()), MEUtilizationWebKeys.SECOND_UP_MANSGER,
											country);
									long thirdUpCount = UserDetailsLocalServiceUtil.getManagerUpCount(
											Long.parseLong(themeDisplay.getUser().getJobTitle()), MEUtilizationWebKeys.THIRD_UP_MANSGER,
											country);
									long fourthUpCount = UserDetailsLocalServiceUtil.getManagerUpCount(
											Long.parseLong(themeDisplay.getUser().getJobTitle()), MEUtilizationWebKeys.FOURTH_UP_MANSGER,
											country);
									JSONArray data = JSONFactoryUtil.createJSONArray();
			
									JSONObject object = JSONFactoryUtil.createJSONObject();
									if (firstUpCount > 0) {
										object = JSONFactoryUtil.createJSONObject();
										object.put("key", 1);
										object.put("data", "1Up");
										data.put(object);
									}
									if (secounUpCount > 0) {
										object = JSONFactoryUtil.createJSONObject();
										object.put("key", 2);
										object.put("data", "2Up");
										data.put(object);
									}
			
									if (thirdUpCount > 0) {
										object = JSONFactoryUtil.createJSONObject();
										object.put("key", 3);
										object.put("data", "3Up");
										data.put(object);
									}
									if (fourthUpCount > 0) {
										object = JSONFactoryUtil.createJSONObject();
										object.put("key", 4);
										object.put("data", "4Up");
										data.put(object);
									}
			
			
									jsonObject.put("countriesList", countriesList);
									jsonObject.put("managerUPAccessArray", data);
								
									}catch(Exception e) {
									e.printStackTrace();
								}

								
								
							}
		if (StringUtil.equalsIgnoreCase(action, "loadEmployeeOwnershipList")) {
								
								logger.info("Action  Inside<<  " + action);
								String country = ParamUtil.getString(resourceRequest, "country", null);
								
								
								String filterDataArray = ParamUtil.getString(resourceRequest, "filterDataArray");
								boolean isFilterApplied = ParamUtil.getBoolean(resourceRequest, "isFilterApplied");
								int type = ParamUtil.getInteger(resourceRequest, "type", 0);
								
								String tenureInCurrentGrade = StringPool.BLANK;
								String resignationStatus = StringPool.BLANK;
								String customers = StringPool.BLANK;
								String performerType = StringPool.BLANK;
								String location = StringPool.BLANK;
								String gender = StringPool.BLANK;
								String project = StringPool.BLANK;
								String grade = StringPool.BLANK;
								String topTalent = StringPool.BLANK;
								List<String> gradeArrayList = new ArrayList<String>();
								String Niche = StringPool.BLANK;
								String top100 = StringPool.BLANK;
								String vbu = StringPool.BLANK;
								String serviceLineOwn = StringPool.BLANK;
							    JSONArray filterJSONArray  = null;
							    int DRType = 0;
								if (type == ManagerUpType.FOURTH_UP_MANSGER) {
									DRType = ManagerUpType.THIRD_UP_MANSGER;
								} else if (type == ManagerUpType.THIRD_UP_MANSGER) {
									DRType = ManagerUpType.SECOND_UP_MANSGER;
								} else if (type == ManagerUpType.SECOND_UP_MANSGER) {
									DRType = ManagerUpType.FIRST_UP_MANSGER;
								} else if (type == ManagerUpType.FIRST_UP_MANSGER) {
								}
							
							    try {
								    if(Validator.isNotNull(filterDataArray)) {
										 filterJSONArray = JSONFactoryUtil.createJSONArray(filterDataArray);
											if (Validator.isNotNull(filterJSONArray)) {
												for (int i = 0; i < filterJSONArray.length(); i++) {
														JSONObject object = filterJSONArray.getJSONObject(i);
														tenureInCurrentGrade = object.getString("TenureInCurrentGrade");
														resignationStatus = object.getString("resignationStatus");
														customers = object.getString("customerName");
														performerType = object.getString("performerType");
														grade = object.getString("Grade");
														gender = object.getString("Gender");
														project = object.getString("project");
														topTalent = object.getString("topTalent");
														Niche = object.getString("Niche");
														top100 = object.getString("top100");
														vbu = object.getString("vbu");
														serviceLineOwn = object.getString("serviceLineOwn");

												}
												if(Validator.isNotNull(grade)) {
													   JSONArray gradeArray = JSONFactoryUtil.createJSONArray(grade);
													   if(Validator.isNotNull(gradeArray) && gradeArray.length() >0) {
														   for(int i = 0; i<= gradeArray.length()-1;i++ ) {
															   gradeArrayList.add(gradeArray.getString(i));
														   }
													   }
													}
											}
			
								    }
								  
							    }catch(Exception e) {
									logger.info(e.getMessage());
								}

								if (Validator.isNotNull(country) && type != 0) {
									
										if (country.equalsIgnoreCase("All")) {
											country = null;
										}
										
									
										JSONArray loggedUserData = 	EmployeeOwnershipUtilizationUtil.getEmpOwnershipUtilizatonArray(themeDisplay, employeeId, country, type,isFilterApplied
												,tenureInCurrentGrade,resignationStatus,customers,performerType,grade,project,gender,topTalent,Niche,DRType,null,vbu,serviceLineOwn,false,top100);
										
										jsonObject.put("loggedUserData", loggedUserData);
								}//if
									
								
								
							}else if (StringUtil.equalsIgnoreCase(action, "loadEmployeeOwnershipGradeTable")) { 

								logger.info("Action  Inside<<  " + action);
								int type = ParamUtil.getInteger(resourceRequest, "type", 0);
								String country = ParamUtil.getString(resourceRequest, "country", null);
								boolean isReqForLoggedUser = ParamUtil.getBoolean(resourceRequest, "isLoggedInUser");
								String empOwnership = ParamUtil.getString(resourceRequest, "employeeOwnershipName", null);
							    long managerId = ParamUtil.getLong(resourceRequest, "managerId",0);
							    

								String filterDataArray = ParamUtil.getString(resourceRequest, "filterDataArray");
								boolean isFilterApplied = ParamUtil.getBoolean(resourceRequest, "isFilterApplied");
								String tenureInCurrentGrade = StringPool.BLANK;
								String resignationStatus = StringPool.BLANK;
								String performerType = StringPool.BLANK;
								String gender = StringPool.BLANK;
								String customers = StringPool.BLANK;
								String filterGrade = StringPool.BLANK;
								String project = StringPool.BLANK;
								String topTalent = StringPool.BLANK;
								String Niche = StringPool.BLANK;
								String top100 = StringPool.BLANK;
								String vbu = StringPool.BLANK;
								String serviceLineOwn = StringPool.BLANK;
								List<String> filterGradeArray = new ArrayList<String>();

								JSONArray promotionEligibleGradeArray = JSONFactoryUtil.createJSONArray();
								List<String> gradeList = new ArrayList<String>();
								
								//logger.info("The Customer name :"+customerName);
								//logger.info("Filter Applied in LOAD PROMOTION GRADE TABLE:"+isFilterApplied);
								
								try {
								JSONArray filterJSONArray = JSONFactoryUtil.createJSONArray(filterDataArray);
									if (Validator.isNotNull(filterJSONArray)) {
										for (int i = 0; i < filterJSONArray.length(); i++) {
											JSONObject object = filterJSONArray.getJSONObject(i);
											tenureInCurrentGrade = object.getString("TenureInCurrentGrade");
											resignationStatus = object.getString("resignationStatus");
											customers = object.getString("customerName");
											performerType = object.getString("performerType");
											filterGrade = object.getString("Grade");
											gender = object.getString("Gender");
											project = object.getString("project");
											topTalent = object.getString("topTalent");
											Niche = object.getString("Niche");
											vbu = object.getString("vbu");
											serviceLineOwn = object.getString("serviceLineOwn");
											top100 = object.getString("top100");
										}
										
										if(Validator.isNotNull(filterGrade)) {
											   JSONArray gradeArray = JSONFactoryUtil.createJSONArray(filterGrade);
											   if(Validator.isNotNull(gradeArray) && gradeArray.length() >0) {
												   for(int i = 0; i<= gradeArray.length()-1;i++ ) {
													   filterGradeArray.add(gradeArray.getString(i));
												   }
											   }
											}
									}
									
									
									
								}catch(Exception e) {
									logger.info(e.getMessage());
								}
								 int DRType = 0;
									if (type == ManagerUpType.FOURTH_UP_MANSGER) {
										DRType = ManagerUpType.THIRD_UP_MANSGER;
									} else if (type == ManagerUpType.THIRD_UP_MANSGER) {
										DRType = ManagerUpType.SECOND_UP_MANSGER;
									} else if (type == ManagerUpType.SECOND_UP_MANSGER) {
										DRType = ManagerUpType.FIRST_UP_MANSGER;
									} else if (type == ManagerUpType.FIRST_UP_MANSGER) {
									}
								
		
								if ( Validator.isNotNull(country) && type != 0 && !country.isEmpty()) {
		
									if (country.equalsIgnoreCase("All")) {
										country = null;
									}
									
									try {

										if(isFilterApplied && Validator.isNotNull(filterGrade) && filterGrade != "") {
											gradeList = filterGradeArray;
										}else {
											 gradeList = UserDetailsLocalServiceUtil.getDistinctEmployeeOwnershipCurrentGrade(0l, 0, null,null);
										}

									}catch(Exception e) {
										logger.info(e.getMessage());
									}
									
									//logger.info("GradeList:"+gradeList);
									//gradeList.remove("B2");
										
									if(Validator.isNotNull(gradeList) && gradeList.size() > 0) {
									    Collections.sort(gradeList);
									    double c1ToC2TotalEligibleCount = 0;
									    double  c1ToC2TotalBudgetUtilization = 0;
									    double c1ToC2TotalBudgetAllocation = 0;
									    double c1Toc2TotalBudgetDeviation = 0;
									    double c1ToC2TotalPerUtilization = 0;
									    
									    double e1AndBelowTotalEligibleCount = 0;
									    double  e1AndBelowTotalBudgetUtilization = 0;
									    double e1AndBelowTotalBudgetAllocation = 0;
									    double e1AndBelowTotalBudgetDeviation = 0;
									    double e1AndBelowTotalPerUtilization = 0;
									
									    
									    JSONObject c1ToC2Object  = JSONFactoryUtil.createJSONObject();
									    JSONObject e1AndBelowObjet = JSONFactoryUtil.createJSONObject();
									    JSONArray firstJSONArray = JSONFactoryUtil.createJSONArray();
									    JSONArray secondJSONArray = JSONFactoryUtil.createJSONArray();
									    JSONArray thirdJSONArray = JSONFactoryUtil.createJSONArray();

									    int index = 0;
										for(String grade: gradeList) {
											try {
												  JSONObject object = EmployeeOwnershipUtilizationUtil.loadEmployeeOwnershipGradeTable(employeeId, type, country, grade,
															 customers, project, gender, tenureInCurrentGrade, performerType, 
														managerId,DRType,resignationStatus,isFilterApplied,isReqForLoggedUser,empOwnership,topTalent,Niche,vbu,serviceLineOwn,top100);
												if(grade.equals("C1") || grade.equals("C2") || grade.equals("D1") || grade.equals("D2")) {
													
													//logger.info("Grade comes inside"+grade);
													index = index + 1;
												    c1ToC2TotalEligibleCount = c1ToC2TotalEligibleCount +  object.getDouble("eligibleCount");
													c1ToC2TotalBudgetUtilization = c1ToC2TotalBudgetUtilization + object.getDouble("budgetUtilized");
													c1ToC2TotalBudgetAllocation = c1ToC2TotalBudgetAllocation + object.getDouble("budgetAllocated");
													c1Toc2TotalBudgetDeviation = c1Toc2TotalBudgetDeviation + object.getDouble("budgetDeviation");
													if(c1ToC2TotalBudgetUtilization > 0) {
														c1ToC2TotalPerUtilization = ( c1ToC2TotalBudgetUtilization / c1ToC2TotalBudgetAllocation) * 100 ;
													}
													firstJSONArray.put(object);
													//logger.info("finalJSONArray"+firstJSONArray);
												}
												
												 if(grade.equals("E1") || grade.equals("E2") || grade.equals("F1") || grade.equals("F2")) {

													index = index + 1;
													e1AndBelowTotalEligibleCount = e1AndBelowTotalEligibleCount +  object.getDouble("eligibleCount");
													e1AndBelowTotalBudgetUtilization = e1AndBelowTotalBudgetUtilization + object.getDouble("budgetUtilized");
													e1AndBelowTotalBudgetAllocation = e1AndBelowTotalBudgetAllocation + object.getDouble("budgetAllocated");
													e1AndBelowTotalBudgetDeviation = e1AndBelowTotalBudgetDeviation + object.getDouble("budgetDeviation");
													if(e1AndBelowTotalBudgetUtilization > 0) {
														e1AndBelowTotalPerUtilization = ( e1AndBelowTotalBudgetUtilization/ e1AndBelowTotalBudgetAllocation) * 100 ;
													}
													secondJSONArray.put(object);
												}
												 if(!grade.equals("C1") && !grade.equals("C2") && !grade.equals("D1") && !grade.equals("D2")
												   && !grade.equals("E1") && !grade.equals("E2") && !grade.equals("F1") && !grade.equals("F2")) {
													thirdJSONArray.put(object);
												}
												
											}catch(Exception e) {
												logger.info(e.getMessage());
											}
										}// end of for
                                        
                                        if(Validator.isNotNull(thirdJSONArray) && thirdJSONArray.length()  > 0) {
                                        	for(int i = 0 ; i <= thirdJSONArray.length() -1; i++) {
                                        		JSONObject thirdJSONObject = thirdJSONArray.getJSONObject(i);
                                        		e1AndBelowTotalEligibleCount = e1AndBelowTotalEligibleCount +  thirdJSONObject.getDouble("eligibleCount");
												e1AndBelowTotalBudgetUtilization = e1AndBelowTotalBudgetUtilization + thirdJSONObject.getDouble("budgetUtilized");
												e1AndBelowTotalBudgetAllocation = e1AndBelowTotalBudgetAllocation + thirdJSONObject.getDouble("budgetAllocated");
												e1AndBelowTotalBudgetDeviation = e1AndBelowTotalBudgetDeviation + thirdJSONObject.getDouble("budgetDeviation");
												if(e1AndBelowTotalBudgetUtilization > 0) {
													e1AndBelowTotalPerUtilization = ( e1AndBelowTotalBudgetUtilization/ e1AndBelowTotalBudgetAllocation) * 100 ;
												}
                                        	}
                                        }
										c1ToC2Object.put("currentGrade", "C1 to D2(Total)");
                            			c1ToC2Object.put("count", 0);
										c1ToC2Object.put("budgetUtilized", c1ToC2TotalBudgetUtilization);
										c1ToC2Object.put("budgetAllocated", c1ToC2TotalBudgetAllocation);
										c1ToC2Object.put("budgetDeviation", c1Toc2TotalBudgetDeviation);
										c1ToC2Object.put("perUtilization", c1ToC2TotalPerUtilization);
										c1ToC2Object.put("eligibleCount", c1ToC2TotalEligibleCount);
										promotionEligibleGradeArray.put(c1ToC2Object);
										  for (int i = 0; i < firstJSONArray.length(); i++) {
											  promotionEligibleGradeArray.put(firstJSONArray.get(i));
										    }
										  
									    e1AndBelowObjet.put("currentGrade", "E1 and below(Total)");
										e1AndBelowObjet.put("count", index);
										e1AndBelowObjet.put("budgetUtilized", e1AndBelowTotalBudgetUtilization);
										e1AndBelowObjet.put("budgetAllocated", e1AndBelowTotalBudgetAllocation);
										e1AndBelowObjet.put("budgetDeviation", e1AndBelowTotalBudgetDeviation);
										e1AndBelowObjet.put("perUtilization", e1AndBelowTotalPerUtilization);
										e1AndBelowObjet.put("eligibleCount", e1AndBelowTotalEligibleCount);
										
										
										
										promotionEligibleGradeArray.put(e1AndBelowObjet);
										  for (int i = 0; i < secondJSONArray.length(); i++) {
											  promotionEligibleGradeArray.put(secondJSONArray.get(i));
										    }
										  for (int i = 0; i < thirdJSONArray.length(); i++) {
											  promotionEligibleGradeArray.put(thirdJSONArray.get(i));
										    }
										 
										//otherObject.put("currentGrade", "Others");
								    	//otherObject.put("count", index);
								    	//otherObject.put("budgetUtilized", othersTotalBudgetUtilization);
								    	//otherObject.put("budgetAllocated", othersTotalBudgetAllocation);
								    	//otherObject.put("perUtilization", othersTotalPerUtilization);
										//otherObject.put("eligibleCount", othersTotalEligibleCount);
							            //promotionEligibleGradeArray.put(otherObject);
							            
										//logger.info("Promotion Eligible Grade Array:"+promotionEligibleGradeArray);
										jsonObject.put("totalPromotionArray", EmployeeOwnershipUtilizationUtil.loadTotalEmployeeOwnershipEligibleCount(promotionEligibleGradeArray.toString()));
										jsonObject.put("promotionEligibleGradeArray", promotionEligibleGradeArray);
									}
								}
					} //close else if
				
					else if (StringUtil.equalsIgnoreCase(action, "loadFilters")) {
						
								logger.info("inside loadFilters");
								int type = ParamUtil.getInteger(resourceRequest, "type", 1);
								String country = ParamUtil.getString(resourceRequest, "country", "India");
								
								
								if (Validator.isBlank(country) || Validator.isNull(country)) {
									country = "India";
								}
								if (country.equalsIgnoreCase("All")) {
									country = null;
								}
								
								try {
									List<String> customerNames = UserDetailsLocalServiceUtil.getFilterData(employeeId, type,
											UserDetailsFilterColumn.Customer_Name, country);
									if (Validator.isNotNull(customerNames) && customerNames.size() > 0) {
										Collections.sort(customerNames);
										jsonObject.put("customerNames", EmployeeOwnershipUtilizationUtil.bridgeStringJSON(customerNames));
			
									}
									List<String> performanceType = UserDetailsLocalServiceUtil.getFilterData(employeeId,
											type, UserDetailsFilterColumn.PERFORMER_TYPE, country);
									if (Validator.isNotNull(performanceType) && performanceType.size() > 0) {
										Collections.sort(performanceType);
										jsonObject.put("performanceType",
												EmployeeOwnershipUtilizationUtil.bridgeStringJSON(performanceType));
			
									}
								
									List<String> GradeArray = UserDetailsLocalServiceUtil.getFilterData(employeeId,
											type, UserDetailsFilterColumn.CURRENT_GRADE, country);
									if (Validator.isNotNull(GradeArray) && GradeArray.size() > 0) {
										Collections.sort(GradeArray);
										jsonObject.put("GradeArray",
												EmployeeOwnershipUtilizationUtil.bridgeStringJSON(GradeArray));
			
									}
									
									List<String> project = UserDetailsLocalServiceUtil.getFilterData(employeeId,
											type, UserDetailsFilterColumn.Project_Name, country);
									if (Validator.isNotNull(project) && project.size() > 0) {
										Collections.sort(project);
										jsonObject.put("projectArray",
												EmployeeOwnershipUtilizationUtil.bridgeStringJSON(project));
			
									}
									List<String> vbuArray = UserDetailsLocalServiceUtil.getFilterData(employeeId,
											type, UserDetailsFilterColumn.COMP_RECO_VBU, country);
									if (Validator.isNotNull(vbuArray) && vbuArray.size() > 0) {
										Collections.sort(vbuArray);
										jsonObject.put("vbuArray",
												EmployeeOwnershipUtilizationUtil.bridgeStringJSON(vbuArray));
			
									}
									List<String> serviceLineOwnArray = UserDetailsLocalServiceUtil.getFilterData(employeeId,
											type, UserDetailsFilterColumn.PRACTICE, country);
									if (Validator.isNotNull(serviceLineOwnArray) && serviceLineOwnArray.size() > 0) {
										Collections.sort(serviceLineOwnArray);
										jsonObject.put("serviceLineOwnArray",
												EmployeeOwnershipUtilizationUtil.bridgeStringJSON(serviceLineOwnArray));
			
									}
									List<String> tenureInCurrentGradeArray = UserDetailsLocalServiceUtil.getFilterData(employeeId,
											type, UserDetailsFilterColumn.TENURE_IN_CURRENT_GRADE, country);
									if (Validator.isNotNull(tenureInCurrentGradeArray) && tenureInCurrentGradeArray.size() > 0) {
										Collections.sort(tenureInCurrentGradeArray);
										jsonObject.put("TenureInCurrentGradeArray",
												EmployeeOwnershipUtilizationUtil.bridgeStringJSON(tenureInCurrentGradeArray));
			
									}
								}catch(Exception e) {
									logger.info(e.getStackTrace());
								}
								
					}//end of if

						}//action
						PrintWriter printWriter = null;
						try {
							printWriter = resourceResponse.getWriter();
						} catch (IOException e) {
							e.printStackTrace();
						}
						resourceResponse.setContentType(ContentTypes.APPLICATION_JSON);
						if (Validator.isNotNull(printWriter)) {
							printWriter.println(jsonObject.toJSONString());
						}
						printWriter.close();
					
				}
				super.serveResource(resourceRequest, resourceResponse);
		}
	
}
